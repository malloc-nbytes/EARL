module Main

import "std/system.earl";
import "std/utils.earl";
import "std/io.earl";
import "std/str.earl";
import "std/script.earl";

enum State {
    None,
    Variables,
    Functions,
    Methods,
    Members,
    Classes,
    Enums,
}

fn replace_backticks(@ref desc) {
    let backtick = -1;
    for i in 0 to len(desc) {
        let c = desc[i];
        if c == '`' {
            if backtick != -1 {
                desc[backtick] = '=';
                desc[i] = '=';
                backtick = -1;
            }
            else {
                backtick = i;
            }
        }
    }
}

class Parameter [name, ty] {
    @pub let name, ty = (name, ty);

    @pub fn tostr() {
        return this.name + ": " + this.ty;
    }
}

class Function [] {
    @pub let name, returns, description = ("", "", "");
    @pub let parameters = [];

    @pub fn add_name(name) {
        this.name = name;
    }

    @pub fn add_param(param) {
        this.parameters.append(param);
    }

    @pub fn add_returns(returns) {
        this.returns = returns;
    }

    @pub fn add_description(desc) {
        this.description = description;
    }

    @pub fn addto_description(s) {
        this.description += s;
    }

    @pub fn dump() {
        print(this.name, "(");
        for i in 0 to len(this.parameters) {
            print(this.parameters[i].tostr());
            if i != len(this.parameters)-1 {
                print(", ");
            }
        }
        println(") -> ", this.returns);
        println("└──", this.description, "\n");
    }

    @pub fn to_org_mode() {
        let s = "#+begin_example\n";
        s += this.name + "(";
        for i in 0 to len(this.parameters) {
            s += this.parameters[i].name + ": " + this.parameters[i].ty;
            if i != len(this.parameters)-1 { s += ", "; }
        }
        s += ") -> " + this.returns + "\n";
        s += "#+end_example\n\n";
        replace_backticks(this.description);
        s += this.description + "\n";
        return s;
    }
}

class Class [] {
    @pub let name = "";
    @pub let description = "";
    @pub let params = [];
    @pub let methods = [];
    @pub let members = [];

    @pub fn add_name(name) {
        this.name = name;
    }

    @pub fn add_param(param) {
        this.params.append(param);
    }

    @pub fn addto_description(s) {
        this.description += s;
    }

    @pub fn add_method(m) {
        this.methods.append(m);
    }

    @pub fn add_member(m) {
        this.members.append(m);
    }

    @pub fn dump() {
        print(this.name, "[");
        for i in 0 to len(this.params) {
            print(this.params[i].tostr());
            if i != len(this.params)-1 {
                print(", ");
            }
        }
        println("]");
        println("└──", this.description, "\n");
    }

    @pub fn to_org_mode() {
        let s = "#+begin_quote\n#+begin_example\n";
        s += this.name + " [";
        for i in 0 to len(this.params) {
            s += this.params[i].name + ": " + this.params[i].ty;
            if i != len(this.params)-1 { s += ", "; }
        }
        s += "]\n";
        s += "#+end_example\n";
        replace_backticks(this.description);
        s += this.description + "\n#+end_quote\n";

        if len(this.members) != 0 {
            s += "**** *=" + this.name + "= Members*:\n\n";
        }

        foreach m in this.members {
            s += "#+begin_quote\n";
            s += m.to_org_mode() + "\n";
            s += "#+end_quote\n";
        }

        if len(this.methods) != 0 {
            s += "\n**** *=" + this.name + "= Implements*\n\n";
        }
        foreach m in this.methods {
            s += "#+begin_quote\n";
            s += m.to_org_mode() + "\n";
            s += "#+end_quote\n";
        }

        return s;
    }
}

class Variable [] {
    @pub let name = "";
    @pub let ty = "";
    @pub let description = "";

    @pub fn dump() {
        println(this.name, ": ", this.ty);
        println("└──", this.description, "\n");
    }

    @pub fn add_name(name) {
        this.name = name;
    }

    @pub fn add_type(ty) {
        this.ty = ty;
    }

    @pub fn addto_description(s) {
        this.description += s;
    }

    @pub fn to_org_mode() {
        let s = "#+begin_example\n";
        s += this.name + ": " + this.ty + "\n";
        s += "#+end_example\n\n";
        replace_backticks(this.description);
        s += this.description + "\n";
        return s;
    }
}

class Enum [] {
    @pub let name = "";
    @pub let items = [];
    @pub let description = "";

    @pub fn add_name(name) {
        this.name = name;
    }

    @pub fn add_param(item) {
        this.items.append(item);
    }

    @pub fn addto_description(s) {
        this.description += s;
    }

    @pub fn dump() {
        println(this.name, " {");
        for i in 0 to len(this.items) {
            print("    ", this.items[i].tostr());
            if i != len(this.items)-1 {
                print(",");
            }
            println();
        }
        println("}");
        println("└──", this.description, "\n");
    }

    @pub fn to_org_mode() {
        let s = "#+begin_example\n";
        s += this.name + " {\n";

        for i in 0 to len(this.items) {
            let di = this.items[i];
            s += "    " + di.name + " -> " + di.ty;
            if i != len(this.items)-1 {
                s += ",";
            }
            s += "\n";
        }

        s += "}\n";
        s += "#+end_example\n\n";
        replace_backticks(this.description);
        s += this.description + "\n";

        return s;
    }
}

class Entry [import_, mod, classes, functions, enums, variables] {
    @pub let import_ = import_;
    @pub let mod = mod;
    @pub let classes = classes;
    @pub let functions = functions;
    @pub let enums = enums;
    @pub let variables = variables;

    fn functions_to_org_mode() {
        let result = "";
        foreach f in this.functions {
            let s = "#+begin_quote\n";
            s += f.to_org_mode();
            s += "#+end_quote\n";
            result += s + "\n";
        }
        return result;
    }

    fn enums_to_org_mode() {
        let result = "";
        foreach e in this.enums {
            let s = "#+begin_quote\n";
            s += e.to_org_mode();
            s += "#+end_quote\n";
            result += s + "\n";
        }
        return result;
    }

    fn classes_to_org_mode() {
        let result = "";
        foreach c in this.classes {
            # Quotes are handled in the classes.
            let s = "*** *=" + c.name + "=*\n";
            s += c.to_org_mode();
            result += s + "\n";
        }
        return result;
    }

    fn variables_to_org_mode() {
        let result = "";

        foreach v in this.variables {
            let s = "#+begin_quote\n";
            s += v.to_org_mode();
            s += "#+end_quote\n";
            result += s + "\n";
        }

        return result;
    }

    @pub fn to_org_mode() {
        let s = "** " + this.mod + "\n\n";
        s += "*** *Import*: =\""+ this.import_ +"\"=\n\n";
        s += "*** *Module*: =" + this.mod + "=\n\n";

        s += "*** *Variable List*:";
        if len(this.variables) == 0 {
            s += " /None/\n\n";
        }
        else {
            s += "\n" + variables_to_org_mode();
        }

        s += "*** *Enum List*:";
        if len(this.enums) == 0 {
            s += " /None/\n\n";
        }
        else {
            s += "\n" + enums_to_org_mode();
        }

        s += "*** *Function List*:";
        if len(this.functions) == 0 {
            s += " /None/\n\n";
        }
        else {
            s += "\n" + functions_to_org_mode();
        }

        s += "*** *Class List*:";
        if len(this.classes) == 0 {
            s += " /None/\n\n";
        }
        else {
            s += "\n" + classes_to_org_mode();
        }

        return s;
    }
}

fn commit(
    @ref state,
    @ref cur_item,
    @const @ref variables,
    @const @ref functions,
    @const @ref enums,
    @const @ref classes,
    @const @ref methods,
    @const @ref members,
    @ref cur_class,
    mod) {

    assert(cur_item);

    if state == State.Variables {
        print("(Variable) ", f"{mod}::");
        cur_item.unwrap().dump();
        variables.append(cur_item.unwrap());
        state = State.None;
        cur_item = none;
    }
    else if state == State.Functions {
        print("(Function) ", f"{mod}::");
        cur_item.unwrap().dump();
        functions.append(cur_item.unwrap());
        state = State.None;
        cur_item = none;
    }
    else if state == State.Enums {
        print("(Enum) ", f"{mod}::");
        cur_item.unwrap().dump();
        enums.append(cur_item.unwrap());
        state = State.None;
        cur_item = none;
    }
    else if state == State.Classes {
        print("(Class) ", f"{mod}::");
        cur_item.unwrap().dump();
        foreach m in methods { cur_item.unwrap().add_method(m); }
        foreach m in members { cur_item.unwrap().add_member(m); }
        classes.append(cur_item.unwrap());
        state = State.None;
        cur_item = none;
    }
    else if state == State.Methods {
        print("(Method) ", f"{mod}::", cur_class.unwrap().name, ".");
        cur_item.unwrap().dump();
        methods.append(cur_item.unwrap());
        state = State.Classes;
        cur_item = cur_class;
    }
    else if state == State.Members {
        print("(Member) ", f"{mod}::", cur_item.unwrap().name, ".");
        cur_member.unwrap().dump();
        members.append(cur_item.unwrap());
        state = State.Classes;
        cur_item = cur_class;
    }
}

fn index(lines, fp) {
    let state = State.None;
    let mod = "";
    let variables, functions, enums, classes = (
        [],
        [],
        [],
        [],
    );
    let methods, members = ([], []);
    let history = "";
    let cur_item = none;
    let cur_class = none;
    let desc_newline = false;

    let i = 0;
    while i < len(lines) {
        let line = lines[i];
        Str::trim(line);

        let parts = line.split(" ").filter(|s|{return s != "";});
        if parts[0] == "module" {
            if mod != "" {
                panic("duplicate module statements");
            }
            mod = parts[1];
        }
        else if parts[0] == "###" {
            if parts[1] == "Variable" {
                cur_item = some(Variable());
                state = State.Variables;
            }
            else if parts[1] == "Function" {
                cur_item = some(Function());
                state = State.Functions;
            }
            else if parts[1] == "Enum" {
                cur_item = some(Enum());
                state = State.Enums;
            }
            else if parts[1] == "Class" {
                cur_item = some(Class());
                state = State.Classes;
            }
            else if parts[1] == "Method" {
                cur_class = cur_item;
                cur_item = some(Function());
                state = State.Methods;
            }
            else if parts[1] == "Member" {
                cur_class = cur_item;
                cur_item = some(Variable());
                state = State.Members;
            }
            else if parts[1] == "End" {
                commit(state, cur_item, variables, functions, enums, classes, methods, members, cur_class, mod);
            }
            else {
                panic("unknown section: ", parts[1]);
            }
        }
        else if parts[0] == "#--" {
            let right = parts[2:].fold(|s, acc|{return acc+' '+s;}, "");
            assert(cur_item);
            match parts[1] {
                "Name:" -> {
                    desc_newline = false;
                    Str::trim(right);
                    cur_item.unwrap().add_name(right);
                }
                "Type:" -> {
                    desc_newline = false;
                    Str::trim(right);
                    cur_item.unwrap().add_type(right);
                }
                "Parameter:" -> {
                    desc_newline = false;
                    let param_parts = right.split(":");
                    let name = param_parts[0];
                    let ty = "";
                    if len(param_parts) > 2 {
                        ty = param_parts[1:].fold(|s, acc|{return acc+':'+s;}, "");
                    }
                    else {
                        ty = param_parts[1];
                    }
                    Str::trim(name);
                    Str::trim(ty);
                    cur_item.unwrap().add_param(Parameter(name, ty));
                }
                "Returns:" -> {
                    desc_newline = false;
                    Str::trim(right);
                    cur_item.unwrap().add_returns(right);
                }
                "Description:" -> {
                    cur_item.unwrap().addto_description(right);
                    if len(right) > 0 {
                        desc_newline = true;
                    }
                }
                _ -> {
                    let s = "";
                    if len(parts) < 2 {
                        s = "";
                    }
                    else if desc_newline {
                        s = '\n'+parts[1]+right;
                    }
                    else {
                        s = parts[1]+right;
                        desc_newline = true;
                    }
                    cur_item.unwrap().addto_description(s);
                }
            }
        }

        i += 1;
    }

    if mod == "" {
        panic(f"file `{fp}` is missing a module statement");
    }

    return (
        Entry(fp, mod, classes, functions, enums, variables).to_org_mode(),
        mod
    );
}

fn ready_input(fp) {
    let lines = IO::file_to_str(fp)
        .split("\n")
        .filter(|k|{return k != "";});
    return lines;
}

fn main() {
    let stdlib = System::ls("std/");
    let autogen = "";
    let docsfp = "../EARL-language-reference.org";
    let modules = [];

    foreach f in stdlib {
        println("############################################################");
        println(f"# Indexing {f}");
        println("############################################################\n");
        let lines = ready_input(f);
        let content, mod = index(lines, f);
        autogen += content;
        modules.append(mod);
    }

    let orig_content = IO::file_to_str(docsfp).split("# BEGIN_AUTOGEN")[0] + "# BEGIN_AUTOGEN\n";

    let f = open(docsfp, "w");
    let content = orig_content+autogen;
    f.write(content);
    f.close();

    println(f"The following modules were written to {docsfp}");
    println(modules);

    if Script::program_exists("emacs") {
        println("Found Emacs, converting EARL-language-reference.org to HTML");
        $"rm ../EARL-language-reference.html";
        $"rm ../README.html";
        $"emacs --batch ../EARL-language-reference.org -f org-html-export-to-html";
        $"emacs --batch ../README.org -f org-html-export-to-html";
    }
    else {
        println("Emacs is not available on the system, cannot convert EARL-language-reference.org to HTML, ignoring...");
    }
}

main();

