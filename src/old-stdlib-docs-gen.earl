# MIT License

# Copyright (c) 2023 malloc-nbytes

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

### This file is used to generate the Stdlib variables, functions,
### classes, and enums in the EARL-language-reference.org file.

module Main

import "std/system.earl";
import "std/io.earl";
import "std/str.earl";
import "std/utils.earl";
import "std/script.earl"; as scr

enum State {
    None = 0,
    Variables = 1 << Utils::iota(),
    Functions = 1 << Utils::iota(),
    Classes   = 1 << Utils::iota(),
    Enums     = 1 << Utils::iota(),
    Methods   = 1 << Utils::iota(),
    Members   = 1 << Utils::iota(),
}

fn replace_backticks(@ref desc) {
    let backtick = -1;
    for i in 0 to len(desc) {
        let c = desc[i];
        if c == '`' {
            if backtick != -1 {
                desc[backtick] = '=';
                desc[i] = '=';
                backtick = -1;
            }
            else {
                backtick = i;
            }
        }
    }
}

class Parameter [name, ty] {
    @pub let name, ty = (name, ty);

    @pub fn tostr() {
        return this.name + ": " + this.ty;
    }
}

class Function [] {
    @pub let name, returns, description = ("", "", "");
    @pub let parameters = [];

    @pub fn add_name(name) {
        this.name = name;
    }

    @pub fn add_param(param) {
        this.parameters.append(param);
    }

    @pub fn add_returns(returns) {
        this.returns = returns;
    }

    @pub fn add_description(desc) {
        this.description = description;
    }

    @pub fn addto_description(s) {
        this.description += s;
    }

    @pub fn dump() {
        this.description.pop(len(this.description)-1);
        print(this.name, "(");
        for i in 0 to len(this.parameters) {
            print(this.parameters[i].tostr());
            if i != len(this.parameters)-1 {
                print(", ");
            }
        }
        println(") -> ", this.returns);
        println("└──", this.description, "\n");
    }

    @pub fn to_org_mode() {
        let s = "#+begin_example\n";
        s += this.name + "(";
        for i in 0 to len(this.parameters) {
            s += this.parameters[i].name + ": " + this.parameters[i].ty;
            if i != len(this.parameters)-1 { s += ", "; }
        }
        s += ") -> " + this.returns + "\n";
        s += "#+end_example\n\n";
        replace_backticks(this.description);
        s += this.description + "\n";
        return s;
    }
}

class Class [] {
    @pub let name = "";
    @pub let description = "";
    @pub let params = [];
    @pub let methods = [];
    @pub let members = [];

    @pub fn add_name(name) {
        this.name = name;
    }

    @pub fn add_param(param) {
        this.params.append(param);
    }

    @pub fn addto_description(s) {
        this.description += s;
    }

    @pub fn add_method(m) {
        this.methods.append(m);
    }

    @pub fn add_member(m) {
        this.members.append(m);
    }

    @pub fn dump() {
        this.description.pop(len(this.description)-1);
        print(this.name, "[");
        for i in 0 to len(this.params) {
            print(this.params[i].tostr());
            if i != len(this.params)-1 {
                print(", ");
            }
        }
        println("]");
        println("└──", this.description, "\n");
    }

    @pub fn to_org_mode() {
        let s = "#+begin_quote\n#+begin_example\n";
        s += this.name + " [";
        for i in 0 to len(this.params) {
            s += this.params[i].name + ": " + this.params[i].ty;
            if i != len(this.params)-1 { s += ", "; }
        }
        s += "]\n";
        s += "#+end_example\n";
        replace_backticks(this.description);
        s += this.description + "\n#+end_quote\n";

        if len(this.members) != 0 {
            s += "**** *=" + this.name + "= Members*:\n\n";
        }

        foreach m in this.members {
            s += "#+begin_quote\n";
            s += m.to_org_mode() + "\n";
            s += "#+end_quote\n";
        }

        if len(this.methods) != 0 {
            s += "\n**** *=" + this.name + "= Implements*\n\n";
        }
        foreach m in this.methods {
            s += "#+begin_quote\n";
            s += m.to_org_mode() + "\n";
            s += "#+end_quote\n";
        }

        return s;
    }
}

class Variable [] {
    @pub let name = "";
    @pub let ty = "";
    @pub let description = "";

    @pub fn dump() {
        this.description.pop(len(this.description)-1);
        println(this.name, ": ", this.ty);
        println("└──", this.description, "\n");
    }

    @pub fn add_name(name) {
        this.name = name;
    }

    @pub fn add_type(ty) {
        this.ty = ty;
    }

    @pub fn addto_description(s) {
        this.description += s;
    }

    @pub fn to_org_mode() {
        let s = "#+begin_example\n";
        s += this.name + ": " + this.ty + "\n";
        s += "#+end_example\n\n";
        replace_backticks(this.description);
        s += this.description + "\n";
        return s;
    }
}

class Enum [] {
    @pub let name = "";
    @pub let items = [];
    @pub let description = "";

    @pub fn add_name(name) {
        this.name = name;
    }

    @pub fn add_param(item) {
        this.items.append(item);
    }

    @pub fn addto_description(s) {
        this.description += s;
    }

    @pub fn dump() {
        this.description.pop(len(this.description)-1);
        println(this.name, " {");
        for i in 0 to len(this.items) {
            print("    ", this.items[i].tostr());
            if i != len(this.items)-1 {
                print(",");
            }
            println();
        }
        println("}");
        println("└──", this.description, "\n");
    }

    @pub fn to_org_mode() {
        let s = "#+begin_example\n";
        s += this.name + " {\n";

        for i in 0 to len(this.items) {
            let di = this.items[i];
            s += "    " + di.name + " -> " + di.ty;
            if i != len(this.items)-1 {
                s += ",";
            }
            s += "\n";
        }

        s += "}\n";
        s += "#+end_example\n\n";
        replace_backticks(this.description);
        s += this.description + "\n";

        return s;
    }
}

class Entry [import_, mod, classes, functions, enums, variables] {
    @pub let import_ = import_;
    @pub let mod = mod;
    @pub let classes = classes;
    @pub let functions = functions;
    @pub let enums = enums;
    @pub let variables = variables;

    fn functions_to_org_mode() {
        let result = "";
        foreach f in this.functions {
            let s = "#+begin_quote\n";
            s += f.to_org_mode();
            s += "#+end_quote\n";
            result += s + "\n";
        }
        return result;
    }

    fn enums_to_org_mode() {
        let result = "";
        foreach e in this.enums {
            let s = "#+begin_quote\n";
            s += e.to_org_mode();
            s += "#+end_quote\n";
            result += s + "\n";
        }
        return result;
    }

    fn classes_to_org_mode() {
        let result = "";
        foreach c in this.classes {
            # Quotes are handled in the classes.
            let s = "*** *=" + c.name + "=*\n";
            s += c.to_org_mode();
            result += s + "\n";
        }
        return result;
    }

    fn variables_to_org_mode() {
        let result = "";

        foreach v in this.variables {
            let s = "#+begin_quote\n";
            s += v.to_org_mode();
            s += "#+end_quote\n";
            result += s + "\n";
        }

        return result;
    }

    @pub fn to_org_mode() {
        let s = "** " + this.mod + "\n\n";
        s += "*** *Import*: =\""+ this.import_ +"\"=\n\n";
        s += "*** *Module*: =" + this.mod + "=\n\n";

        s += "*** *Variable List*:";
        if len(this.variables) == 0 {
            s += " /None/\n\n";
        }
        else {
            s += "\n" + variables_to_org_mode();
        }

        s += "*** *Enum List*:";
        if len(this.enums) == 0 {
            s += " /None/\n\n";
        }
        else {
            s += "\n" + enums_to_org_mode();
        }

        s += "*** *Function List*:";
        if len(this.functions) == 0 {
            s += " /None/\n\n";
        }
        else {
            s += "\n" + functions_to_org_mode();
        }

        s += "*** *Class List*:";
        if len(this.classes) == 0 {
            s += " /None/\n\n";
        }
        else {
            s += "\n" + classes_to_org_mode();
        }

        return s;
    }
}

fn ready_input(fp) {
    let lst = IO::file_to_str(fp).split("###");
    lst.foreach(|@ref el| { Str::trim(el); });
    lst.pop(0); # pop MIT License
    lst.foreach(|@ref el| {
        let newline = Str::find(el, '\n');
        if newline {
            if el.substr(0, newline.unwrap()) != "MODULE" {
                el = el.substr(0, newline.unwrap());
            }
        }
    });
    return lst;
}

fn handle_begin(@ref state, @ref splits, @ref cur_item, @ref cur_method, @ref cur_member) {
    assert(len(splits) == 2);
    match splits[1] {
        "FUNCTIONS" -> {
            state `|= State.Functions;
            cur_item = some(Function());
        }
        "VARIABLES" -> {
            state `|= State.Variables;
            cur_item = some(Variable());
        }
        "CLASSES" -> {
            state `|= State.Classes;
            cur_item = some(Class());
        }
        "ENUMS" -> {
            state `|= State.Enums;
            cur_item = some(Enum());
        }
        "METHODS" -> {
            state `|= State.Methods;
            cur_method = some(Function());
        }
        "MEMBERS" -> {
            state `|= State.Members;
            cur_member = some(Variable());
        }
        _ -> { panic("unknown BEGIN section: " + splits[1]); }
    }
}

fn handle_end(@ref state, @const @ref splits, @ref cur_item, @ref cur_method, @ref cur_member) {
    assert(len(splits) == 2);
    match splits[1] {
        "FUNCTIONS" -> {
            cur_item = none;
            state `&= `~State.Functions;
        }
        "VARIABLES" -> {
            cur_item = none;
            state `&= `~State.Variables;
        }
        "CLASSES" -> {
            cur_item = none;
            state `&= `~State.Classes;
        }
        "ENUMS" -> {
            cur_item = none;
            state `&= `~State.Enums;
        }
        "METHODS" -> {
            cur_method = none;
            state `&= `~State.Methods;
        }
        "MEMBERS" -> {
            cur_member = none;
            state `&= `~State.Members;
        }
        _ -> { panic("unknown END section: " + splits[1]); }
    }
}

fn commit(@ref cur_item,
          @ref cur_method,
          @ref cur_member,
          @const @ref state,
          @const @ref funcs,
          @const @ref methods,
          @const @ref classes,
          @const @ref enums,
          @const @ref vars
          @const @ref mod) {

    assert(cur_item.is_some());

    if (state `& State.Functions) != 0 {
        funcs.append(cur_item.unwrap());
        print("(Function) ", f"{mod}::");
        cur_item.unwrap().dump();
        cur_item = some(Function());
    }
    else if (state `& State.Methods) != 0 {
        assert(cur_method.is_some());
        cur_item.unwrap().add_method(cur_method.unwrap());
        print("(Method) ", f"{mod}::", cur_item.unwrap().name, ".");
        cur_method.unwrap().dump();
        cur_method = some(Function());
    }
    else if (state `& State.Members) != 0 {
        assert(cur_member.is_some());
        cur_item.unwrap().add_member(cur_member.unwrap());
        print("(Member) ", f"{mod}::", cur_item.unwrap().name, ".");
        cur_member.unwrap().dump();
        cur_member = some(Variable());
    }
    else if (state `& State.Classes) != 0 {
        classes.append(cur_item.unwrap());
        print("(Class) ", f"{mod}::");
        cur_item.unwrap().dump();
        cur_item = some(Class());
    }
    else if (state `& State.Enums) != 0 {
        enums.append(cur_item.unwrap());
        print("(Enum) ", f"{mod}::");
        cur_item.unwrap().dump();
        cur_item = some(Enum());
    }
    else if (state `& State.Variables) != 0 {
        vars.append(cur_item.unwrap());
        print("(Variable) ", f"{mod}::");
        cur_item.unwrap().dump();
        cur_item = some(Variable());
    }
}

fn index(filepath) {
    let lst = ready_input(filepath);

    let state = State.None;
    let funcs, methods, classes, enums, vars = ([], [], [], [], []);
    let cur_item, cur_method, cur_member = (none, none, none);
    let mod, import_ = ("", "");
    let in_desc = false;

    foreach el in lst {
        let parts = el.split("\n");
        if parts[0] == "MODULE" {
            mod = parts[1].split(" ")[1];
            continue;
        }
        let splits = parts[0].split(" ");

        if splits[0] == "BEGIN" {
            in_desc = false;
            handle_begin(state, splits, cur_item, cur_method, cur_member);
        }
        else if splits[0] == "END" {
            in_desc = false;
            commit(cur_item, cur_method, cur_member, state, funcs, methods, classes, enums, vars, mod);
            handle_end(state, splits, cur_item, cur_method, cur_member);
        }

        else if splits[0] == "NAME" {
            in_desc = false;
            assert(cur_item.is_some());

            if (state `& State.Members) != 0 {
                assert(cur_member.is_some());
                if cur_member.unwrap().name != "" {
                    commit(cur_item, cur_method, cur_member, state, funcs, methods, classes, enums, vars, mod);
                }
            }
            else if (state `& State.Methods) != 0 {
                assert(cur_method.is_some());
                if cur_method.unwrap().name != "" {
                    commit(cur_item, cur_method, cur_member, state, funcs, methods, classes, enums, vars, mod);
                }
            }
            else if cur_item.unwrap().name != "" {
                commit(cur_item, cur_method, cur_member, state, funcs, methods, classes, enums, vars, mod);
            }

            if (state `& State.Functions) != 0 {
                cur_item.unwrap().add_name(splits[1]);
            }
            else if (state `& State.Enums) != 0 {
                cur_item.unwrap().add_name(splits[1]);
            }
            else if (state `& State.Methods) != 0 {
                cur_method.unwrap().add_name(splits[1]);
            }
            else if (state `& State.Members) != 0 {
                cur_member.unwrap().add_name(splits[1]);
            }
            else if (state `& State.Classes) != 0 {
                cur_item.unwrap().add_name(splits[1]);
            }
            else if (state `& State.Variables) != 0 {
                cur_item.unwrap().add_name(splits[1]);
            }
            else {
                panic(f"unknown state: {state}");
            }
        }

        else if splits[0] == "PARAMETER" {
            in_desc = false;
            let ty = "";
            for i in 2 to len(splits) {
                ty += splits[i];
                if i != len(splits)-1 {
                    ty += " ";
                }
            }
            let p = Parameter(splits[1].substr(0, len(splits[1])-1), ty);
            if (state `& State.Methods) != 0 {
                assert(cur_method.is_some());
                cur_method
                    .unwrap()
                    .add_param(p);
            }
            else {
                assert(cur_item.is_some());
                cur_item
                    .unwrap()
                    .add_param(p);
            }
        }

        else if splits[0] == "RETURNS" {
            in_desc = false;
            let ty = "";
            for i in 1 to len(splits) { ty += splits[i]; }
            if (state `& State.Methods) != 0 {
                assert(cur_method.is_some());
                cur_method
                    .unwrap()
                    .add_returns(ty);
            }
            else {
                assert(cur_item.is_some());
                cur_item
                    .unwrap()
                    .add_returns(ty);
            }
        }

        else if splits[0] == "DESCRIPTION" {
            assert(cur_item.is_some());
            assert(!in_desc && "extra description detected");
            in_desc = true;
        }

        else if splits[0] == "TYPE" {
            assert(cur_item.is_some());
            assert(((state `& State.Variables) != 0) || ((state `& State.Members) != 0));
            let ty = "";
            for i in 1 to len(splits) {
                ty += splits[i];
                if i != len(splits)-1 {
                    ty += " ";
                }
            }
            if (state `& State.Members) != 0 {
                cur_member
                    .unwrap()
                    .add_type(ty);
            }
            if (state `& State.Variables) != 0 {
                cur_item
                    .unwrap()
                    .add_type(ty);
            }

        }

        else if in_desc {
            if (state `& State.Members) != 0 {
                cur_member
                    .unwrap()
                    .addto_description(parts[0] + " ");
            }
            if (state `& State.Methods) != 0 {
                cur_method
                    .unwrap()
                    .addto_description(parts[0] + " ");
            }
            else {
                assert(cur_item.is_some());
                cur_item
                    .unwrap()
                    .addto_description(parts[0] + " ");
            }
        }
    }

    if mod == "" {
        panic("missing module for file: " + filepath);
    }

    return (Entry(filepath, mod, classes, funcs, enums, vars).to_org_mode(), mod);
}

fn main() {
    let stdlib = System::ls("std/");
    let autogen = "";
    let docsfp = "../EARL-language-reference.org";
    let modules = [];

    foreach f in stdlib {
        println("############################################################");
        println(f"# Indexing {f}");
        println("############################################################\n");
        let content, mod = index(f);
        autogen += content;
        modules.append(mod);
    }

    let orig_content = IO::file_to_str(docsfp).split("# BEGIN_AUTOGEN")[0] + "# BEGIN_AUTOGEN\n";

    let f = open(docsfp, "w");
    let content = orig_content+autogen;
    f.write(content);
    f.close();

    println(f"The following modules were written to {docsfp}");
    println(modules);

    if scr::program_exists("emacs") {
        println("Found Emacs, converting EARL-language-reference.org to HTML");
        $"rm ../EARL-language-reference.html";
        $"rm ../README.html";
        $"emacs --batch ../EARL-language-reference.org -f org-html-export-to-html";
        $"emacs --batch ../README.org -f org-html-export-to-html";
    }
    else {
        println("Emacs is not available on the system, cannot convert EARL-language-reference.org to HTML, ignoring...");
    }
}

main();
